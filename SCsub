Import("env")

module_env = env.Clone()

module_env.Prepend(CPPPATH=["thirdparty/mtlx/source", "#modules/mtlx", "thirdparty/mtlx/include"])

if env["platform"] == "macos" or env["platform"] == "ios":
    module_env.Append(CPPDEFINES=["DMATERIALXVIEW_METAL_BACKEND=1"])
elif env["platform"] == "linux":
    module_env.Append(CPPDEFINES=["__linux__"])

module_env.Append(CPPDEFINES=["GL_SILENCE_DEPRECATION"])

env_thirdparty = module_env.Clone()
env_thirdparty.disable_warnings()
if env["disable_exceptions"]:
    # MTLX hard-requires exceptions, so we re-enable them here.
    if env.msvc and ("_HAS_EXCEPTIONS", 0) in env_thirdparty["CPPDEFINES"]:
        env_thirdparty["CPPDEFINES"].remove(("_HAS_EXCEPTIONS", 0))
        env_thirdparty.AppendUnique(CCFLAGS=["/EHsc"])
    elif not env.msvc and "-fno-exceptions" in env_thirdparty["CCFLAGS"]:
        env_thirdparty["CCFLAGS"].remove("-fno-exceptions")


def add_source_files_with_exclusion(env, sources, pattern):
    import glob
    import os

    for file in glob.glob(pattern, recursive=True):
        if file not in exclude_files:
            env.add_source_files(sources, file)


env.add_source_files(env_thirdparty, env.modules_sources, "thirdparty/mtlx/source/MaterialXCore/*.cpp")
env.add_source_files(env_thirdparty, env.modules_sources, "thirdparty/mtlx/source/MaterialXFormat/*.cpp")
env.add_source_files(
    env_thirdparty, env.modules_sources, "thirdparty/mtlx/source/MaterialXFormat/External/PugiXML/*.cpp"
)
env.add_source_files(env_thirdparty, env.modules_sources, "thirdparty/mtlx/source/MaterialXGenShader/*.cpp")
env.add_source_files(env_thirdparty, env.modules_sources, "thirdparty/mtlx/source/MaterialXGenShader/Nodes/*.cpp")
env.add_source_files(env_thirdparty, env.modules_sources, "thirdparty/mtlx/source/MaterialXGenGlsl/*.cpp")
env.add_source_files(env_thirdparty, env.modules_sources, "thirdparty/mtlx/source/MaterialXGenGlsl/Nodes/*.cpp")

module_env.add_source_files(env.modules_sources, "*.cpp")
